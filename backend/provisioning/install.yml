- name: Install
  hosts: nodes
  tasks:
    - include_vars: /home/nate/delivr/config.yml

    - name: Add debian sid repo
      apt_repository:
        repo: "{{ item }}"
        state: present
      with_items:
        - deb http://deb.debian.org/debian/ sid main
        - deb [trusted=yes] https://apt.fury.io/caddy/ /

    - name: Set default release
      copy:
        content: APT::Default-Release "stable";
        dest: /etc/apt/apt.conf.d/default-release

    - name: Install rsync, bind9, dnsutils, caddy, ufw
      apt:
        update_cache: yes
        #        cache_valid_time: 36000 # 10 hours
        pkg:
          - rsync
          - bind9
          - curl
          - dnsutils
          - caddy

    - name: Install BIRD2 from sid
      apt:
        name: bird2
        default_release: sid

    - name: Create BIRD2 log file
      copy:
        content: ""
        dest: /etc/bird/log.txt
        force: no
        owner: bird
        group: bird

    - name: Check if GoRTR is installed
      command: dpkg-query -W gortr
      register: gortr_installed
      failed_when: gortr_installed.rc > 1
      changed_when: gortr_installed.rc == 1

    - name: Get GoRTR package
      get_url:
        url: https://github.com/cloudflare/gortr/releases/download/v0.14.6/gortr_0.14.6_amd64.deb
        dest: /root/gortr.deb
      when: gortr_installed.rc == 1

    - name: Install GoRTR
      apt:
        deb: /root/gortr.deb
      when: gortr_installed.rc == 1

    - name: Start GoRTR
      systemd:
        name: gortr
        state: started
        enabled: yes

    - name: Reload RPKI protocol
      shell: birdc reload rpki1
      when: gortr_installed.rc == 1

    - name: Copy BIRD2 config
      template:
        src: bird.j2
        dest: /etc/bird/bird.conf
      vars:
        asn: 34553
        selected_ipv4_prefix: "{{ dns['prefix4'] }}"
        selected_ipv6_prefix: "{{ dns['prefix6'] }}"
      register: bird_config

    - name: Apply BIRD config
      shell: birdc config
      when: bird_config.changed

    - name: Create unique BIND config
      template:
        src: named.conf.options.j2
        dest: /etc/bind/named.conf.options
      vars:
        bind_addresses4: "{{ dns['bind_addresses4']}}"
        bind_addresses6: "{{ dns['bind_addresses6']}}"
      register: bind_config

    - name: Copy named.conf
      copy:
        content: |
          include "/etc/bind/named.conf.options";
          include "/etc/bind/named.conf.local";
          include "/etc/bind/named.conf.default-zones";
        dest: /etc/bind/named.conf

    - name: Reload BIND config
      shell: rndc reload
      when: bind_config.changed

    - name: Get bind_exporter
      unarchive:
        src: https://github.com/prometheus-community/bind_exporter/releases/download/v0.3.0/bind_exporter-0.3.0.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Move bind_exporter to path
      command: mv /tmp/bind_exporter-0.3.0.linux-amd64/bind_exporter /usr/bin/

    - name: Create bind_exporter service
      copy:
        content: |
          [Unit]
          Description=BIND Exporter
          After=network.target

          [Service]
          User=root
          Group=root
          Type=simple
          ExecStart=/usr/bin/bind_exporter -web.listen-address="{{ ansible_host }}:9119"

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/bind-exporter.service
      register: bind_exporter

    - name: Enable and start bind_exporter
      systemd:
        name: bind-exporter
        enabled: yes
        state: restarted
      when: bind_exporter.changed

    - name: Create network config
      copy:
        content: "{{ dns['network_config'] }}"
        dest: /root/network.sh
        mode: +x
      register: network_config

    - name: Apply network config
      shell: bash /root/network.sh
      when: network_config.changed

    - name: Set hosts file
      copy:
        content: |
          127.0.0.1	localhost
          ::1     localhost ip6-localhost ip6-loopback
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters
        dest: /etc/hosts

    - name: Set persistent hostname
      shell: hostnamectl set-hostname "{{ inventory_hostname }}"

    - name: Create Caddy directory
      file:
        path: /caddy
        state: directory

    - name: Create Caddyfile
      template:
        src: Caddyfile.j2
        dest: /etc/caddy/Caddyfile
      register: caddy

    - name: Copy local.delivr.dev fullchain.pem
      copy:
        src: /etc/letsencrypt/live/local.delivr.dev/fullchain.pem
        dest: /caddy/fullchain.pem
        owner: caddy
        group: caddy
      register: caddy

    - name: Copy local.delivr.dev privkey.pem
      copy:
        src: /etc/letsencrypt/live/local.delivr.dev/privkey.pem
        dest: /caddy/privkey.pem
        owner: caddy
        group: caddy
      register: caddy

    - name: Reload caddy config
      shell: caddy reload -config /etc/caddy/Caddyfile
      when: caddy.changed
